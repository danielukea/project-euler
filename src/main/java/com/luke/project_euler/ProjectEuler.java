package com.luke.project_euler;

import java.io.PrintStream;

/**
 * Runner for all of Project Euler Questions
 * 
 * @author ladan
 *
 */
public class ProjectEuler {

	/**
	 * Runs all problems and outputs to Standard output stream
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		String FORMAT = "The answer to Problem %d is: %d\n";
		PrintStream p = new PrintStream(System.out);

		p.printf(FORMAT, 1, problemOne(1000));
		p.printf(FORMAT, 2, problemTwo(4000000));
		p.printf(FORMAT, 3, problemThree(600851475143L));
		p.printf(FORMAT, 4, problemFour());
		p.printf(FORMAT, 5, problemFive());
		p.printf(FORMAT, 6, problemSix());
		p.printf(FORMAT, 7, problemSeven());
		p.printf(FORMAT, 8, problemEight());

	}

	/**
	 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we
	 * get 3, 5, 6 and 9. The sum of these multiples is 23.
	 * 
	 * Find the sum of all the multiples of 3 or 5 below 1000.
	 * 
	 * @param input
	 * @return
	 */
	public static int problemOne(int input) {

		return Utilities.sumOfMultipleMultiplesUnder(input, 5, 3);
	}

	/**
	 * Each new term in the Fibonacci sequence is generated by adding the previous
	 * two terms. By starting with 1 and 2, the first 10 terms will be:
	 * 
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * 
	 * By considering the terms in the Fibonacci sequence whose values do not exceed
	 * four million, find the sum of the even-valued terms.
	 * 
	 * @param input
	 * @return
	 */
	public static int problemTwo(int input) {

		int answer = 0;
		int[] evenFibArray = Utilities.findEvens(FibonacciUtils.generateFibonacciMaxValueUnder(input));

		for (int each : evenFibArray)
			answer += each;

		return answer;
	}

	/**
	 * The prime factors of 13195 are 5, 7, 13 and 29.
	 * 
	 * What is the largest prime factor of the number 600851475143 ?
	 * 
	 * @param input
	 * @return
	 */
	public static long problemThree(long input) {

		long[] primeFactors = PrimeUtils.findPrimeFactors(input);
		long max = 0;

		for (long each : primeFactors) {
			if (max < each && each != input)
				max = each;
		}
		return max;
	}

	/**
	 * A palindromic number reads the same both ways. The largest palindrome made
	 * from the product of two 2-digit numbers is 9009 = 91 × 99.
	 * 
	 * Find the largest palindrome made from the product of two 3-digit numbers.
	 * 
	 * @param input
	 * @return largest palindrome product
	 */
	public static long problemFour() {

		long num = 999 * 999;
		int ceiling = 1000;
		for (long i = num; i > 0; i--) {
			if (Utilities.isPalindrome(i)) {
				long[] arr = Utilities.findFactorsLessThan(i, ceiling);

				if (arr.length > 1)
					if (arr[Utilities.maxIndex(arr)] < ceiling) {
						return i;
					}
			}
		}

		return 0;

	}

	/**
	 * 2520 is the smallest number that can be divided by each of the numbers from 1
	 * to 10 without any remainder.
	 * 
	 * What is the smallest positive number that is evenly divisible by all of the
	 * numbers from 1 to 20?
	 * 
	 * @return number divisible by all in range
	 */
	public static long problemFive() {

		int low = 1;
		int high = 20;

		return Utilities.evenlyDivisibleByRange(low, high);
	}

	/**
	 * The sum of the squares of the first ten natural numbers is,
	 * 
	 * 12 + 22 + ... + 102 = 385 The square of the sum of the first ten natural
	 * numbers is,
	 * 
	 * (1 + 2 + ... + 10)2 = 552 = 3025 Hence the difference between the sum of the
	 * squares of the first ten natural numbers and the square of the sum is 3025 −
	 * 385 = 2640.
	 * 
	 * Find the difference between the sum of the squares of the first one hundred
	 * natural numbers and the square of the sum.
	 */
	public static long problemSix() {

		return Utilities.squareOfSumUnder(100) - Utilities.sumOfSquares(100);
	}

	/**
	 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
	 * that the 6th prime is 13.
	 * 
	 * What is the 10 001st prime number? @ return
	 */
	public static int problemSeven() {
		int prime = 0;
		int number = 10001;
		int counter = 0;

		while (counter <= number) {
			prime++;
			if (PrimeUtils.isPrime(prime)) {
				counter++;
			}
		}
		return prime;
	}

	/**
	 * The four adjacent digits in the 1000-digit number that have the greatest
	 * product are 9 × 9 × 8 × 9 = 5832.
	 * 
	 * 73167176531330624919225119674426574742355349194934
	 * 96983520312774506326239578318016984801869478851843
	 * 85861560789112949495459501737958331952853208805511
	 * 12540698747158523863050715693290963295227443043557
	 * 66896648950445244523161731856403098711121722383113
	 * 62229893423380308135336276614282806444486645238749
	 * 30358907296290491560440772390713810515859307960866
	 * 70172427121883998797908792274921901699720888093776
	 * 65727333001053367881220235421809751254540594752243
	 * 52584907711670556013604839586446706324415722155397
	 * 53697817977846174064955149290862569321978468622482
	 * 83972241375657056057490261407972968652414535100474
	 * 82166370484403199890008895243450658541227588666881
	 * 16427171479924442928230863465674813919123162824586
	 * 17866458359124566529476545682848912883142607690042
	 * 24219022671055626321111109370544217506941658960408
	 * 07198403850962455444362981230987879927244284909188
	 * 84580156166097919133875499200524063689912560717606
	 * 05886116467109405077541002256983155200055935729725
	 * 71636269561882670428252483600823257530420752963450
	 * 
	 * Find the thirteen adjacent digits in the 1000-digit number that have the
	 * greatest product. What is the value of this product?
	 */
	public static long problemEight() {
		int arrLength = 13;
		String input = "73167176531330624919225119674426574742355349194934\r\n"
				+ "96983520312774506326239578318016984801869478851843\r\n"
				+ "85861560789112949495459501737958331952853208805511\r\n"
				+ "12540698747158523863050715693290963295227443043557\r\n"
				+ "66896648950445244523161731856403098711121722383113\r\n"
				+ "62229893423380308135336276614282806444486645238749\r\n"
				+ "30358907296290491560440772390713810515859307960866\r\n"
				+ "70172427121883998797908792274921901699720888093776\r\n"
				+ "65727333001053367881220235421809751254540594752243\r\n"
				+ "52584907711670556013604839586446706324415722155397\r\n"
				+ "53697817977846174064955149290862569321978468622482\r\n"
				+ "83972241375657056057490261407972968652414535100474\r\n"
				+ "82166370484403199890008895243450658541227588666881\r\n"
				+ "16427171479924442928230863465674813919123162824586\r\n"
				+ "17866458359124566529476545682848912883142607690042\r\n"
				+ "24219022671055626321111109370544217506941658960408\r\n"
				+ "07198403850962455444362981230987879927244284909188\r\n"
				+ "84580156166097919133875499200524063689912560717606\r\n"
				+ "05886116467109405077541002256983155200055935729725\r\n"
				+ "71636269561882670428252483600823257530420752963450";
		
		input = input.replace("\n", "").replace("\r", "");
		char[] arr = input.toCharArray();

		long max = Long.MIN_VALUE;
		long product=1;
		for (int i = 0; i < arr.length - arrLength; i++) {
			product = Utilities.product(i, i + arrLength - 1, arr);
			if (product > max)
				max = product;
		}
		return max;
	}
	

}
